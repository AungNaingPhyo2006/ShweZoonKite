import {Alert, StyleSheet, Text, View, TouchableOpacity} from 'react-native';
import React, {useEffect, useRef, useState} from 'react';
import TrackPlayer, {
  useTrackPlayerEvents,
  usePlaybackState,
  Event,
  State,
} from 'react-native-track-player';
import Icon from 'react-native-vector-icons/FontAwesome';
import SleepModal from './SleepModal';
import AsyncStorage from '@react-native-async-storage/async-storage';
import moment from 'moment';
import BackgroundTimer from 'react-native-background-timer';

const PlayerControl = ({onShuffle}) => {
  const [sleepTime, setSleepTime] = useState(null); // sleep timer
  const [sleepModalVisible, setSleepModalVisible] = useState(false);
  const [remainingTime, setRemainingTime] = useState(0);
  const [playerState, setPlayerState] = useState(null); // player state
  const [intervale, setIntervale] = useState(0);
  const [isActive, setIsActive] = useState(false);

  const onClose = () => {
    setSleepModalVisible(false);
  };

  async function handlePlayPress() {
    if (playerState === State.Playing) {
      await TrackPlayer.pause();
      setPlayerState(State.Paused);
      stopTimer(); //+
      // console.log('when pause', sleepTime);
    } else {
      await TrackPlayer.play();
      setPlayerState(State.Playing);

      startTimer(); //add+

      // console.log('when play', sleepTime);
    }
  }
  console.log('SLEEPTIME', sleepTime);

  const stopTimer = async () => {
    clearInterval(intervale); //add+ 2023 -> to stop timer indicator
    console.log('test', intervale);
    setIntervale(null);
    console.log('I am stopTimer');
  };

  const startTimer = () => {
    // if (sleepTime !== null) {
    //   return;
    // }
    const intervalId = setInterval(() => {
      console.log('I AM RUNNING AGAIN');
      if (sleepTime !== null) {
        setSleepTime(prev => prev + 1);
      }
    }, 1000);
    setIntervale(intervalId); //add 2023
    return () => {
      clearInterval(intervalId);
    };
    console.log('hi i am startTmer fn');
  };

  // useEffect(() => {
  //   // if (sleepTime !== null && sleepTime > new Date().getTime()) {
  //   async () => {
  //     const now = new Date().getTime();
  //     const startTime = await AsyncStorage.getItem('sleepTimer');

  //     const elapsedTime = now - parseInt(startTime);
  //     const remainingTime = 5 * 60 * 1000 - elapsedTime; // assuming 5 minutes sleep timer

  //     console.log('Elapsed Time:', elapsedTime);
  //     console.log('Remaining Time:', remainingTime);
  //     setRemainingTime(remainingTime);
  //   };
  //   console.log('hi', remainingTime);
  //   // console.log(moment.utc(Math.max(remainingTime, 0)).format('m:ss'));
  // }, [sleepTime]);

  const setSleepTimer = async minutes => {
    if (minutes === 'stop') {
      setSleepTime(null);
      await AsyncStorage.removeItem('sleepTimer');
    } else {
      const now = new Date();
      const sleepTime = now.getTime() + minutes * 60 * 1000; //* 60 * 1000
      await AsyncStorage.setItem('sleepTimer', sleepTime.toString());
      setSleepTime(sleepTime);
      setSleepModalVisible(false);
      // setIntervale(null); // add + 2023
    }
  };

  //<---------------------->
  // useEffect(() => {
  //   const loadSleepTimer = async () => {
  //     const sleepTimer = await AsyncStorage.getItem('sleepTimer');
  //     if (sleepTimer !== null) {
  //       setSleepTime(parseInt(sleepTimer));
  //       //console.log('hello');
  //     }
  //   };
  //   // console.log('hi');
  //   loadSleepTimer();
  // }, []);

  useEffect(() => {
    // Clear the sleep timer when playback ends
    const clearSleepTimer = async () => {
      setSleepTime(null);
      await AsyncStorage.removeItem('sleepTimer');
    };

    const endOfQueueListener = TrackPlayer.addEventListener(
      Event.EndOfQueue,
      clearSleepTimer,
    );

    const playbackStateListener = TrackPlayer.addEventListener(
      Event.PlaybackState,
      async ({state}) => {
        setPlayerState(state);
        // Stop the sleep timer if the track has ended or been stopped
        if (state === State.Stopped || state === State.Ended) {
          setSleepTime(null);
          clearInterval(intervale); //add
          await AsyncStorage.removeItem('sleepTimer');
        }
      },
    );

    const progressListener = TrackPlayer.addEventListener(
      Event.PlaybackProgressUpdated,
      ({position, duration}) => {
        if (sleepTime !== null && sleepTime <= new Date().getTime()) {
          TrackPlayer.pause();
          setSleepTime(null);
          // setStopTime(null);
          clearInterval(intervale); //add
          setIntervale(null); // add + 2023
          AsyncStorage.removeItem('sleepTimer');
        }
      },
    );

    // Remove all event listeners when the component unmounts
    return () => {
      endOfQueueListener.remove();
      playbackStateListener.remove();
      progressListener.remove();
    };
  }, [sleepTime]);

  const onStop = async () => {
    // setSleepTimer(null);
    setSleepTime(null);
    setSleepModalVisible(false);
    await AsyncStorage.removeItem('sleepTimer');
  };

  const sleepTimes = async minutes => {
    let sleepMinutes;
    switch (minutes) {
      case 5:
      case 10:
      case 15:
      case 30:
      case 45:
      case 60:
      case 'stop':
        sleepMinutes = minutes;
        break;
      default:
        sleepMinutes = 0;
    }

    if (sleepMinutes > 0) {
      await AsyncStorage.setItem('sleepMinutes', sleepMinutes.toString());

      setSleepTimer(sleepMinutes);
      //setMinutesSet(sleepMinutes); // to get set minutes
      // Play the track if it's not playing
      if (playerState !== State.Playing) {
        console.log('i am playing in sleepTimes Fn with: ', sleepMinutes);
        handlePlayPress();
      }
    }
  };

  return (
    <View
      style={{flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center'}}>
      <Icon.Button
        name="random"
        size={28}
        backgroundColor="transparent"
        onPress={onShuffle}
      />
      <Icon.Button
        name="arrow-left"
        size={28}
        backgroundColor="transparent"
        onPress={() => TrackPlayer.skipToPrevious()}
      />
      <Icon.Button
        name={playerState == State.Playing ? 'pause' : 'play'}
        size={28}
        backgroundColor="transparent"
        onPress={handlePlayPress}
      />
      <Icon.Button
        name="arrow-right"
        size={28}
        backgroundColor="transparent"
        onPress={() => TrackPlayer.skipToNext()}
      />

      {sleepTime === null ? (
        <Icon.Button
          name="clock-o"
          size={28}
          backgroundColor="transparent"
          // onPress={sleepTimes}     // onPress={() => sleepTimes(10)}
          onPress={() => setSleepModalVisible(!sleepModalVisible)}
        />
      ) : (
        <TouchableOpacity
          onPress={() => setSleepModalVisible(!sleepModalVisible)}>
          <Text style={{color: '#fff'}}>
            ‚è∞
            {sleepTime !== null
              ? moment
                  .utc(Math.max(sleepTime - new Date().getTime(), 0))
                  .format('m:ss')
              : ''}
          </Text>
        </TouchableOpacity>
      )}
      {/* TEST */}
      <Text style={{color: 'pink', fontSize: 11}}>
        {/* {!isNaN(Date.parse(stopTime))
          ? moment.utc(Math.ceil(stopTime, 0)).format('m:ss')
          : ''} */}
      </Text>
      <SleepModal
        visible={sleepModalVisible}
        onClose={onClose}
        onSelect={sleepTimes}
        onStop={onStop}
      />
    </View>
  );
};

export default PlayerControl;

const styles = StyleSheet.create({});
